Description: >
  Alexandre Dias / Server Architecture / Udacity CloudFormation project

Parameters:
  
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  
  VolumeSize:
    Description: The volume size of EC2 instance
    Type: String
    Default: '10'

  AutoScalingMaxSize:
    Description: The max number of EC2 instances
    Type: String
    Default: '3'

  AutoScalingMinSize:
    Description: The min number of EC2 instances
    Type: String
    Default: '5'
  
  MyIP:
    Description: My home IP to set on Bastion host' security group
    Type: String

Resources:
  
  # --- Security group ---

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  BastionHostSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH connection on Bastion
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref MyIP
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  
  # --- IAM Role for access S3 ---

  UdagramReadOnlyAcces:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - UdagramReadOnlyAcces

  # --- Bastion Host ---
  
  BastionHostAZ1:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-07ebfd5b3428b6f4d
      InstanceType: t2.micro
      KeyName: nano
      SecurityGroupIds:
        - Ref: BastionHostSecGroup
      SubnetId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-BASTION-AZ1
  
  BastionHostAZ2:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-07ebfd5b3428b6f4d
      InstanceType: t2.micro
      KeyName: nano
      SecurityGroupIds:
        - Ref: BastionHostSecGroup
      SubnetId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-BASTION-AZ2

  # --- Launching Configuration and Auto scaling group

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile:
        Ref: "UdagramReadOnlyAcces"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: ami-07ebfd5b3428b6f4d
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: !Ref VolumeSize
 
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: !Ref AutoScalingMaxSize
      MaxSize: !Ref AutoScalingMinSize
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  # --- LoadBalancer ---

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  LBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
  
Outputs:

  LoadBalancerURL:
    Description: The LoadBalancerURL
    Value: !Sub http://${WebAppLB.DNSName}
    Export: 
      Name: !Sub ${EnvironmentName}-LB-DNS
  
  BastionIPAZ1:
    Description: IP of the Bastion host
    Value: !GetAtt BastionHostAZ1.PublicIp
    Export: 
      Name: !Sub ${EnvironmentName}-BASTION-IP-AZ1
  BastionIPAZ2:
    Description: IP of the Bastion host
    Value: !GetAtt BastionHostAZ2.PublicIp
    Export: 
      Name: !Sub ${EnvironmentName}-BASTION-IP-AZ2